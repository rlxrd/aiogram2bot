from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from app.keyboards import keyboards as kb
from database import db_start, create_profile, edit_profile
import dotenv
import os
import sqlite3 as sq

db = sq.connect('tg.db')
cur = db.cursor()

dotenv.load_dotenv()
storage = MemoryStorage()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    await db_start()


class AddItems(StatesGroup):
    number = State()
    name = State()
    desc = State()
    photo = State()
    price = State()


class AddToCart(StatesGroup):
    looking = State()
    adding = State()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!', reply_markup=kb.main)
    user = cur.execute("SELECT a_id FROM accounts WHERE a_id == '{key}'".format(key=message.from_user.id)).fetchone()
    if not user:
        cur.execute("INSERT INTO accounts VALUES(?, ?)", (message.from_user.id, ''))
        db.commit()
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=kb.admin_main)


@dp.message_handler(text='–û—Ç–º–µ–Ω–∞', state='*')
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(f'–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.main)
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=kb.admin_main)


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def add_item(message: types.Message) -> None:
    await AddItems.number.set()
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –ù–û–ú–ï–† (–õ–û–¢) —Ç–æ–≤–∞—Ä–∞ (—Ü–∏—Ñ—Ä—ã)', reply_markup=kb.cancel)


@dp.message_handler(state=AddItems.number)
async def add_item_id(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['iid'] = message.text
    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!)')
    await AddItems.next()


@dp.message_handler(state=AddItems.name)
async def add_item_name(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['name'] = message.text

    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!)')
    await AddItems.next()


@dp.message_handler(state=AddItems.desc)
async def add_item_desc(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['desc'] = message.text

    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ (–ò–ú–ï–ù–ù–û –§–û–¢–û)')
    await AddItems.next()


@dp.message_handler(lambda message: not message.photo, state=AddItems.photo)
async def add_item_check_photo(message: types.Message) -> None:
    await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')


@dp.message_handler(content_types=['photo'], state=AddItems.photo)
async def add_item_load_photo(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id

    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞! –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!)')
    await AddItems.next()


@dp.message_handler(state=AddItems.price)
async def add_item_price(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:

        data['price'] = message.text
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=data['photo'],
                             caption=f"{data['name']}, {data['desc']}\n{data['price']}")
    await create_profile(item_id=data['iid'])
    await edit_profile(state, item_id=data['iid'])
    await message.reply('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', reply_markup=kb.admin_main)
    await state.finish()


@dp.message_handler(text='–ö–∞—Ç–∞–ª–æ–≥ üëü')
async def catalog(message: types.Message) -> None:
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–æ—Å—Å—ã', reply_markup=kb.catalog)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'add_to_cart')
async def add_to_cart(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        cur.execute("UPDATE accounts SET cart_id = {tovar} WHERE a_id == {user}".format(tovar=data['tovar'], user=message.from_user.id))
        db.commit()
        await message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
        await state.finish()


@dp.callback_query_handler(lambda c: True)
async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
    cur.execute("SELECT * FROM items WHERE name == '{key}'".format(key=callback_query.data))
    item = cur.fetchall()
    await bot.send_photo(callback_query.from_user.id, photo=item[0][4],
                         caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {item[0][1]}!\n"
                                 f"–¶–µ–Ω–∞: {item[0][3]}", reply_markup=kb.add_to_cart)
    async with state.proxy() as data:
        data['tovar'] = item[0][0]


@dp.message_handler(text='–ö–æ—Ä–∑–∏–Ω–∞ üóë')
async def catalog(message: types.Message) -> None:
    cur.execute("SELECT cart_id FROM accounts WHERE a_id == {key}".format(key=message.from_user.id))
    item = cur.fetchall()
    if item[0][0] == '':
        await message.answer(f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')
    else:
        cur.execute("SELECT * FROM items WHERE i_id == {key}".format(key=item[0][0]))
        tovar = cur.fetchall()
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {tovar[0][1]}\n'
                             f'–¶–µ–Ω–∞: {tovar[0][3]}\n', reply_markup=kb.buy)

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
